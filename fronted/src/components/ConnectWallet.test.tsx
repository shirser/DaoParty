import { ethers } from "ethers";

// –ò—Å–ø–æ–ª—å–∑—É–µ–º BrowserProvider –≤–º–µ—Å—Ç–æ JsonRpcProvider!
const provider =
  typeof window !== "undefined" && window.ethereum
    ? new ethers.BrowserProvider(window.ethereum)
    : null;

const nftPassportABI = [
  "function balanceOf(address owner) external view returns (uint256)",
  "function hasPassport(address user) external view returns (bool)",
  "function getUserPassport(address user) external view returns (uint256)",
  "function mintPassport(address user) external"
];

console.log("üîç NEXT_PUBLIC_NFT_CONTRACT:", process.env.NEXT_PUBLIC_NFT_CONTRACT);
console.log("üîç NEXT_PUBLIC_DAOPARTY_CONTRACT:", process.env.NEXT_PUBLIC_DAOPARTY_CONTRACT);

const nftPassportAddress = process.env.NEXT_PUBLIC_NFT_CONTRACT!;
console.log("üîó –ê–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞:", nftPassportAddress);

if (!nftPassportAddress) {
  throw new Error("‚ùå –ê–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ NFT –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!");
}

async function getSigner() {
  if (!provider) {
    console.error("‚ùå –û—à–∏–±–∫–∞: MetaMask –Ω–µ –Ω–∞–π–¥–µ–Ω!");
    throw new Error("MetaMask –Ω–µ –Ω–∞–π–¥–µ–Ω!");
  }
  try {
    console.log("üåç –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ MetaMask...");
    console.log("üñ•Ô∏è –ü—Ä–æ–≤–∞–π–¥–µ—Ä:", provider);
    await provider.send("eth_requestAccounts", []); // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–æ—Å—Ç—É–ø
    const signer = await provider.getSigner();
    const address = await signer.getAddress();
    console.log("üë§ Signer –∞–¥—Ä–µ—Å:", address);
    return signer;
  } catch (error: unknown) {
    const err = error as Error;
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ signer:", err);
    throw new Error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è signer. –ü—Ä–æ–≤–µ—Ä—å MetaMask.");
  }
}

async function getNftPassportContract() {
  const signer = await getSigner();
  console.log("üìú –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç NFTPassport...");
  console.log("üîó –ö–æ–Ω—Ç—Ä–∞–∫—Ç –∞–¥—Ä–µ—Å:", nftPassportAddress);
  console.log("üìù ABI –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞:", nftPassportABI);
  const contract = new ethers.Contract(nftPassportAddress, nftPassportABI, signer);
  console.log("üõ† –°–æ–∑–¥–∞–Ω –∫–æ–Ω—Ç—Ä–∞–∫—Ç NFTPassport:", contract);
  return contract;
}

async function checkNFT(address: string): Promise<{ hasNFT: boolean; reason: string | null }> {
  console.log("üìû –í—ã–∑—ã–≤–∞–µ–º checkNFT –¥–ª—è:", address);
  try {
    const nftPassportContract = await getNftPassportContract();
    console.log("üõ† –ö–æ–Ω—Ç—Ä–∞–∫—Ç NFTPassport —Å–æ–∑–¥–∞–Ω:", nftPassportContract);

    // üîé –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å NFT
    console.log("üîç –í—ã–∑—ã–≤–∞–µ–º balanceOf...");
    const balanceRaw = await nftPassportContract.balanceOf(address);
    if (balanceRaw == null) {
      console.error("‚ùå –û—à–∏–±–∫–∞: balanceOf –≤–µ—Ä–Ω—É–ª undefined –∏–ª–∏ null");
      return { hasNFT: false, reason: "–û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞ balanceOf" };
    }
    console.log("‚úÖ –ë–∞–ª–∞–Ω—Å NFT –ø–µ—Ä–µ–¥ –ø—Ä–æ–≤–µ—Ä–∫–æ–π:", balanceRaw.toString());

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –±–∞–ª–∞–Ω—Å –≤ BigInt
    const balance = BigInt(balanceRaw.toString());
    console.log("‚úÖ –ë–∞–ª–∞–Ω—Å NFT –ø–æ—Å–ª–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≤ BigInt:", balance.toString());

    if (balance <= 0n) {
      console.log("üö´ –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç NFT.");
      return { hasNFT: false, reason: "–í—ã –¥–æ–ª–∂–Ω—ã –≤–ª–∞–¥–µ—Ç—å NFT" };
    }

    // üîé –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–∞—Å–ø–æ—Ä—Ç
    console.log("üìú –ü—Ä–æ–≤–µ—Ä—è–µ–º hasPassport...");
    const hasPassport = await nftPassportContract.hasPassport(address);
    console.log("üìú –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–º–µ–µ—Ç NFT-–ø–∞—Å–ø–æ—Ä—Ç?", hasPassport);
    if (!hasPassport) {
      return { hasNFT: false, reason: "–ü–∞—Å–ø–æ—Ä—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ" };
    }

    console.log("üÜî –ü–æ–ª—É—á–∞–µ–º ID NFT-–ø–∞—Å–ø–æ—Ä—Ç–∞...");
    const tokenId = await nftPassportContract.getUserPassport(address);
    console.log("üÜî ID NFT-–ø–∞—Å–ø–æ—Ä—Ç–∞:", tokenId.toString());

    return { hasNFT: true, reason: null };
  } catch (error: unknown) {
    const err = error as Error;
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ balanceOf:", err);
    return { hasNFT: false, reason: err.message || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞" };
  }
}

export { checkNFT };
