import { ethers } from "ethers";

// –ï—Å–ª–∏ MetaMask –¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º BrowserProvider, –∏–Ω–∞—á–µ JSON-RPC Provider
let provider;
if (typeof window !== "undefined" && window.ethereum) {
  provider = new ethers.BrowserProvider(window.ethereum);
} else {
  const rpcUrl = "https://rpc-amoy.polygon.technology";
  provider = new ethers.JsonRpcProvider(rpcUrl);
}

// –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–µ –±–µ–∑ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É —Å–≤–æ–π—Å—Ç–≤—É connection.url
console.log("üåç –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–µ—Ç–∏:", provider ? provider.constructor.name : "–ü—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω");

async function connectWallet() {
  if (typeof window === "undefined" || !window.ethereum) {
    alert("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ MetaMask!");
    return null;
  }

  try {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º BrowserProvider –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ MetaMask
    if (provider instanceof ethers.BrowserProvider) {
      // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
      await provider.send("eth_requestAccounts", []);
      const signer = await provider.getSigner();
      const address = await signer.getAddress();
      console.log("‚úÖ –ö–æ—à–µ–ª–µ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω:", address);
      return { address, signer };
    } else {
      throw new Error("BrowserProvider –Ω–µ –Ω–∞–π–¥–µ–Ω");
    }
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫–æ—à–µ–ª—å–∫–∞:", error);
    return null;
  }
}

export { provider, connectWallet };
